services:
  - docker:dind

stages:
  - test
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  GIT_SUBMODULE_STRATEGY: recursive
  DJANGO_MASTER_IMAGE: "ejplatform/ej-server:master"
  DJANGO_LATEST_IMAGE: "ejplatform/ej-server:latest"
  BACKEND_MASTER_IMAGE: "ejplatform/ej-nginx:master"
  BACKEND_LATEST_IMAGE: "ejplatform/ej-nginx:latest"


#
# Testing
#

test:
  stage: test
  image: ejplatform/ej-cicd:latest
  script:
    - docker pull $DJANGO_MASTER_IMAGE || true
    - docker build --cache-from $DJANGO_MASTER_IMAGE -t $DJANGO_MASTER_IMAGE -f ./docker/production/django/Dockerfile .
    - docker-compose -f ./docker/develop/test.yml run --rm django
  tags:
    - docker

cache build:
  stage: test
  image: ejplatform/ej-cicd:latest
  script:
    - docker pull $DJANGO_MASTER_IMAGE || true
    - docker build --cache-from $DJANGO_MASTER_IMAGE -t $DJANGO_MASTER_IMAGE -f ./docker/production/django/Dockerfile .
    - docker save $DJANGO_MASTER_IMAGE -o image.tar
  only:
    - master
    - tags
  tags:
    - docker
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - image.tar

#
# Pushing images to registry
#

.pusher: &pusher
  image: docker
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
    - docker load -i image.tar
  tags:
    - docker
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - image.tar
    policy: pull

push master backend:
  << : *pusher
  stage: push
  script:
    - docker build -t $BACKEND_MASTER_IMAGE -f ./docker/production/nginx/master.Dockerfile .
    - docker push $BACKEND_MASTER_IMAGE
  only:
    - master

push master django:
  << : *pusher
  stage: push
  script:
    - docker push $DJANGO_MASTER_IMAGE
  only:
    - master

push latest backend:
  << : *pusher
  stage: push
  script:
    - docker build -t $BACKEND_LATEST_IMAGE -f ./docker/production/nginx/latest.Dockerfile .
    - docker push $BACKEND_LATEST_IMAGE
  only:
    - tags

push latest django:
  << : *pusher
  stage: push
  script:
    - docker push $DJANGO_LATEST_IMAGE
  only:
    - tags


#
# Rancher service upgrade
#

.deployer: &deployer
  image: cdrx/rancher-gitlab-deploy
  script:
    - upgrade --environment $RANCHER_ENVIRONMENT --stack $RANCHER_STACK --service backend --no-finish-upgrade --sidekicks
    - upgrade --environment $RANCHER_ENVIRONMENT --stack $RANCHER_STACK --service flower --no-finish-upgrade
    - upgrade --environment $RANCHER_ENVIRONMENT --stack $RANCHER_STACK --service worker --no-finish-upgrade
  tags:
    - docker

deploy master images:
  << : *deployer
  stage: deploy
  environment: develop
  only:
    - master

deploy latest images:
  << : *deployer
  stage: deploy
  environment: production
  only:
    - tags
