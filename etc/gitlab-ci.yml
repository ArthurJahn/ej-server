stages:
  - build
  - test
  - publish
  - deploy

cache:
  paths:
    - locale/
    - lib/


variables:
  DOCKER_DRIVER: overlay2
  PREBUILD_VERSION: v0-pre1


# BUILD: the build stage recreates the base docker images used by the other
# stages of the pipeline. This is executed only sporadically
.build base images:
  image: docker
  stage: build
  services:
    - docker:dind
  script:
    - &login docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
    - cd docker/base-images/ && sh build.sh publish
  tags:
    - docker
#  only:
#    - tags

build translations:
  image: ejplatform/tools:latest
  stage: build
  script:
    - python etc/scripts/compilemessages.py
    - inv sass --no-watch
  tags:
    - docker


# TEST: test in different environments by changing the database or running a
# linter
test-sqlite3:
  image: ejplatform/python:dev
  stage: test
  script:
    - pip install -r etc/requirements/develop.txt -r etc/requirements/git-modules.txt
    - pytest

test-pgsql:
  image: ejplatform/python:dev
  stage: test
  variables:
    DJANGO_DB_URL: postgres:postgres@postgres:5432
  services:
    - postgres
  script:
    - pip install -r etc/requirements/develop.txt -r etc/requirements/git-modules.txt
    - pytest

test-flake8:
  image: ejplatform/python:dev
  stage: test
  script:
    - flake8 src/

test-flake8-alpine:
  image: ejplatform/python:alpine
  stage: test
  script:
    - pip install flake8
    - flake8 src/

test-flake8-alpine-scratch:
  image: alpine:latest
  stage: test
  script:
    - apk add python3
    - python3 -m pip install flake8
    - flake8 src/



## Reusable configurations
#.container: &container
#  image: ejplatform/docker-invoke:$PREBUILD_VERSION
#  services:
#    - docker:dind
#  before_script:
#    - &login docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#  tags:
#    - docker
#
#.publisher: &publisher
#  image: cdrx/rancher-gitlab-deploy
#  stage: deploy
#  before_script:
#    - *login
#    - docker pull
#  script:
#    - upgrade --environment $RANCHER_ENVIRONMENT --stack $RANCHER_STACK --service backend --sidekicks --no-finish-upgrade
#

## BUILD: build and publish images using the CI_COMMIT_REF_SLUG.
## Those images will not be published under :latest and :tag automatically.
## Only master commits publish images under the :latest tags on dockerhub
## and commits with tags create tagged images.
#build:
#  << : *container
#  stage: build
#  script:
#    - inv -e docker-build -t $CI_COMMIT_REF_SLUG --theme=$THEMES --cache
#    - inv -e docker-push  -t $CI_COMMIT_REF_SLUG --theme=$THEMES
#
#

#
## PUSH: commits on master
#deploy:staging:
#  << : *publisher
#  script:
#    - inv -e docker-push --from $CI_COMMIT_REF_SLUG -t latest
#    - inv -e rancher-push
#  only:
#    - master
#
#deploy:release:
#  << : *publisher
#  script:
#    - inv -e docker-push --from $CI_COMMIT_REF_SLUG -t $CI_COMMIT_TAG
#    - inv -e rancher-push -t $CI_COMMIT_TAG
#  only:
#    - tags
